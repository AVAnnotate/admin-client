---
import '@themes/default/index.css';
import { Theme } from '@radix-ui/themes';
import { TopBar } from '@components/TopBar';
import { getTranslations } from '@i18n';
import type { MyProfile } from '@ty/Types.ts';
import { ViewTransitions } from 'astro:transitions';

interface Props {
  title: string;
  profile: MyProfile;
}

const { profile, title } = Astro.props;
---

<!doctype html>
<html lang='en'>
  <head>
    <meta charset='UTF-8' />
    <meta name='description' content='Astro description' />
    <meta name='viewport' content='width=device-width' />
    <link rel='icon' type='image/svg+xml' href='/favicon.svg' />
    <meta name='generator' content={Astro.generator} />
    <title>{title}</title>
    <ViewTransitions />
  </head>
  <body>
    <TopBar
      i18n={getTranslations(Astro.request, 'landing-page')}
      onError={() => {}}
      me={profile}
      client:load
    />
    <Theme client:load>
      <div class='slot'>
        <div id='page-loader-overlay'>
          <div id='page-loader-spinner'></div>
        </div>
        <slot />
      </div>
    </Theme>
    <style>
      .slot {
        padding-top: 60px;
        /* height: calc(100vh - 60px) !important; */
        background-color: var(--gray-100);
      }
      .loading-state {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.1);
        z-index: 9999;
        display: flex;
        justify-content: center;
        align-items: center;
      }
      .loading {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        border: 10px solid rgba(0, 0, 0, 0.1);
        border-top-color: var(--primary);
        animation: loading 1s linear infinite;
      }
      @keyframes loading {
        to {
          transform: rotate(360deg);
        }
      }
    </style>
    <script is:inline>
      document.addEventListener('astro:before-preparation', (ev) => {
        const originalLoader = ev.loader;
        ev.loader = async function () {
          const elOverlay = document.getElementById('page-loader-overlay');
          const elSpinner = document.getElementById('page-loader-spinner');

          if (elOverlay && elSpinner) {
            elOverlay.classList.add('loading-state');
            elSpinner.classList.add('loading');
            await originalLoader();
            elOverlay.classList.remove('loading-state');
            elSpinner.classList.remove('loading');
          }
        };
      });
    </script>
  </body>
</html>
